h1. Importing a Directory of Files 

[[Source File on GitHub|https://github.com/basho/riak_function_contrib/blob/master/other/erlang/bucket_importer.erl]] 

This Erlang function allows you to import the contents of a directory (recursively) into a bucket, you will need to specify the content type of the data to be imported as well. The function expects files to be named &lt;key&gt;.&lt;extension&gt;. This function is made to work with the [[Bucket Exporter|bucket_exporter]] available on this site as well.

The function takes the 4 arguments:
bucket_importer:import_data(riak node, bucket, directory, content-type)

```erlang
-module(bucket_importer).

-export([import_data/4]).



import_data(ToServer, Bucket, Directory, ContentType) ->
   {ok, Client} = riak:client_connect(ToServer),
   FL = filelib:fold_files(Directory, ".*", true, fun(F, L) -> [F|L] end, []),
   [ load_data(F, Client, list_to_binary(Bucket), ContentType) || F <- FL ].

load_data(FName, Client, Bucket, ContentType) ->
  case file:read_file(FName) of
         {ok, Data} ->
             Key = list_to_binary(filename:basename(FName, filename:extension(FName))),
             Object = riak_object:new(Bucket, Key, Data, ContentType),
             Client:put(Object, 1),
             io:format(".");
         {error, Reason} ->
             io:format("Error reading ~p:~p~n", [FName, Reason])
     end.
```

h3. Tips and tricks for using this functions

If you wanted to import the contents of a directory that contained JSON you could run the function as follows:

```erlang
bucket_importer:import_data('riak@127.0.0.1', "bucket", "/location/of/data", "application/json").
```
